post:
  summary: eRoamingPushEvseStatus_V2.1
  operationId: eRoamingPushEvseStatus_V2.1
  description: |
    __Note:__
      * To `SEND`
      * Implementation: `Mandatory`

    ![Push EVSE status](images/pushevsestatus.png)
    
    When a CPO sends an eRoamingPushEvseStatus request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE status data to Hubject. Furthermore, it is possible to update EVSE status data that has been pushed with an earlier operation request.

    The way how Hubject handles the transferred data `MUST` be defined in the request field "ActionType2, which offers four options. This option works in the same way as the eRoamingAuthenticationData service. The EVSE status data that will be inserted or updated MUST be provided with the field “OperatorEvseStatus”, which consists of “EvseStatusRecord” structures. Hubject keeps a history of all updated and changed data records. Every successful push operation – irrespective of the performed action – leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE status data for every point in time in the past.

    Note:

    The eRoamingPushEvseStatus operation `MUST` always be used sequentiallyas described in Data Push Operations
  
    Best Practices:

    Please try to avoid race conditions by sending multiple status simultaneously. Status should be sent one by one.
  tags:
    - eRoamingEvseStatus
  parameters:
    - $ref: "../../parameters/path/operatorID.yaml"
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "../../schemas/eRoamingPushEvseStatus.yaml"
  responses:
    '200':
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "../../schemas/eRoamingAcknowledgment.yaml"